#include<iostream>
#include<climits>
#include<vector>

using namespace std;

struct Edge
{
    int src, dest, w;
};

void sortEdge(vector<Edge>& edges)
{
    for(int i = 0; i < edges.size(); i++)
    {
        for(int j = 0; j < edges.size() - i - 1; j++)
        {
            if(edges[j].w > edges[j + 1].w)
            {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }
}

int find(vector<int>& parent, int u)
{
    if(parent[u] != u)
    {
        parent[u] = find(parent, parent[u]);
    }
    return parent[u];
}

void unionSets(vector<int>& parent, vector<int>& rank, int u, int v)
{
    int rootU = find(parent, u);
    int rootV = find(parent, v);
    
    if(rootU != rootV)
    {
        if(rank[rootU] < rank[rootV])
        {
            parent[rootU] = rootV;
        }
        else if(rank[rootU] > rank[rootV])
        {
            parent[rootV] = rootU;
        }
        else
        {
            parent[rootV] = rootU;
            rank[rootU]++;
        }
    }
}

void kruskal(int V, int E, vector<Edge>& edges)
{
    sortEdge(edges);
    vector<int> parent(V);
    vector<int> rank(V, 0);
    for(int i = 0; i < V; i++)
    {
        parent[i] = i;
    }
    cout << "Edges in the MST:\n";
    int totalCost = 0;
    for(int i = 0; i < E; i++)
    {
        int u = edges[i].src;
        int v = edges[i].dest;
        
        if(find(parent, u) != find(parent, v))
        {
            unionSets(parent, rank, u, v);
            cout << edges[i].src << "-" << edges[i].dest << endl;
            totalCost += edges[i].w;
        }
    }
    cout << "\nCost of MST: " << totalCost << endl;
}

int main()
{
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;
    
    vector<Edge> edges(E);
    cout << "Enter the edges (src, dest, weight): \n";
    for(int i = 0; i < E; i++)
    {
        cout << "Edge " << i + 1 << ": ";
        cin >> edges[i].src >> edges[i].dest >> edges[i].w;
    }
    cout << endl;
    
    kruskal(V, E, edges);
}
