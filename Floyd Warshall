#include <iostream>
#include <climits>
#include <string>
#include <vector>

using namespace std;

void printFW(const vector<vector<int>>& dist, int step, int V) {
    cout << "M" << step << " : " << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INT_MAX) {
                cout << "INF" << "\t";
            } else {
                cout << dist[i][j] << "\t";
            }
        }
        cout << endl;
    }
    cout << "--------------------------------" << endl;
}

void floydWarshall(const vector<vector<int>>& graph, int V) {
    vector<vector<int>> dist = graph;  // Copy the input graph into dist

    printFW(dist, 0, V);

    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX &&
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
        printFW(dist, k + 1, V);
    }
}

int main() {
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V));

    cout << "Enter the adjacency matrix (use INF for infinity): " << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            string input;
            cin >> input;
            if (input == "INF") {
                graph[i][j] = INT_MAX;
            } else {
                graph[i][j] = stoi(input);
            }
        }
    }
    cout << endl;

    floydWarshall(graph, V);

    return 0;
}
